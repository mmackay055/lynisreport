package main

/*
* Author: Matt MacKay
*  Email: mmacKay055@gmail.com
*   Date: 2022-04-06
 */

// Commandline Tool that parses a report generated by the Unix system scanner
// tool Lynis. It parses all warnings and suggestions generated by Lynis and
// outputs them into a different format such as a serialized JSON object or
// several lines of JSON objects that can be ingested by platforms such as
// Elasticsearch.

import (
	"fmt"
	flag "github.com/spf13/pflag"
	"lynisreport/lynis"
	"os"
)

// Commandline Options
var helpOpt bool         // option to print help menu for tool
var repOpt string        // option for Lynis report location
var logOpt string        // option for log location to output parsed data
var fmtTimestampOpt bool // add timestamp to data
var fmtJsonOpt bool      // option to output data as json
var fmtYamlOpt bool      // option to output data as yaml
var fmtNewLineOpt bool   // option to append newline at end of output
var fmtElasticOpt bool   // option to output test info compatible to be ingetsted by Elasticsearch

const (
	// Error values to be returned
	ERR_REPORTFILE int = 2
	ERR_LOGFILE    int = 3
	ERR_PROCCESS   int = 4
	ERR_WRITELOG   int = 5
	ERR_INVALIDOPT int = 6
)

// Initalize command line options
func init() {
	flag.BoolVarP(&helpOpt,
		"help",
		"h",
		false,
		"Print help menu")
	flag.StringVarP(&repOpt,
		"reportfile",
		"r",
		"/var/log/lynis-report.dat",
		"Specify where to find the Lynis report file")
	flag.StringVarP(&logOpt,
		"logfile",
		"l",
		"",
		"Specify where to log output of report. Default is to standard output")
	flag.BoolVarP(&fmtTimestampOpt,
		"timestamp",
		"t",
		false,
		"Prepend timestamp info before data output")
	flag.BoolVarP(&fmtJsonOpt,
		"json",
		"j",
		true,
		"Output data in json(default output)")
	flag.BoolVarP(&fmtYamlOpt,
		"yaml",
		"y",
		false,
		"Output data in yaml(not yet implemented)")
	flag.BoolVarP(&fmtNewLineOpt,
		"newline",
		"n",
		false,
		"Append new line character to end of output")
	flag.BoolVarP(&fmtElasticOpt,
		"elastic",
		"e",
		false,
		"Output test data in multiple JSON objects to be ingested into Elasticsearch")
}

func main() {

	// Parse command line args
	flag.Parse()

        if helpOpt {
                printHelp()
                os.Exit(0)
        }

	// set data formatters
	var formatter lynis.OutputFormatter
	if fmtYamlOpt {
		fmt.Fprintf(os.Stderr,
			"error: yaml output is not yet implemented\n")
		os.Exit(ERR_INVALIDOPT)
	} else if fmtElasticOpt {
		formatter = &lynis.FormatElasticJSON{}
	} else {
		formatter = &lynis.FormatJSON{}
	}

	// add optional timestamp
	if fmtTimestampOpt {
		lynis.SetNext(formatter, &lynis.FormatTimestamp{})
	}

	// add new line to end of output
	if fmtNewLineOpt {
		lynis.SetNext(formatter, &lynis.FormatNewLine{})
	}

	// open report file
	var input *os.File
	if len(repOpt) < 1 {
		input = os.Stdin
	} else {
		var err error
		input, err = os.Open(repOpt)
		if err != nil {
			fmt.Fprintf(os.Stderr, "error: %s\n",
				err)
			os.Exit(ERR_REPORTFILE)
		}
	}

	// open log file
	var output *os.File
	if len(logOpt) < 1 {
		output = os.Stdout
	} else {
		var err error
		output, err = os.OpenFile(logOpt,
			os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0640)
		if err != nil {
			fmt.Fprintf(os.Stderr,
				"error: failed to open log file %s\n",
				logOpt)
			os.Exit(ERR_LOGFILE)
		}
	}

	// Process Lynis report
	_, data, err := lynis.Process(input, formatter)
	if err != nil {
		//TODO log error message to log file
		fmt.Fprintf(os.Stderr,
			"error: failed to parse Lynis Report %s\n", err)
		os.Exit(ERR_PROCCESS)
	}

	// Write serialized data to output
	if bytes, err := output.Write(data); err != nil {
		fmt.Fprintf(os.Stderr,
			"error: failed writting report to log file. Wrote %d bytes expected %d. %s\n",
			bytes, len(data), err.Error())
		os.Exit(ERR_WRITELOG)
	}
}

func printHelp() {
	fmt.Fprintln(os.Stderr,"Commandline Tool that parses a report generated by the Unix system scanner")
	fmt.Fprintln(os.Stderr,"tool Lynis. It parses all warnings and suggestions generated by Lynis and")
	fmt.Fprintln(os.Stderr,"outputs them into a different format such as a serialized JSON object or")
	fmt.Fprintln(os.Stderr,"several lines of JSON objects that can be ingested by platforms such as")
	fmt.Fprintln(os.Stderr,"Elasticsearch.")
        fmt.Fprintln(os.Stderr,"")
        fmt.Fprintln(os.Stderr,"Usage:")
        fmt.Fprintln(os.Stderr,"")
        fmt.Fprintln(os.Stderr,"\tlynisreport [option]")
        fmt.Fprintln(os.Stderr,"")
        fmt.Fprintln(os.Stderr,"Options:")
        flag.PrintDefaults()
}
